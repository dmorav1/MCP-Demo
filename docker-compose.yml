services:
  postgres:
    image: pgvector/pgvector:pg15
    container_name: mcp-postgres
    environment:
      POSTGRES_DB: mcp_db
      POSTGRES_USER: mcp_user
      POSTGRES_PASSWORD: mcp_password
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mcp_user -d mcp_db"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - mcp-network

  mcp-backend:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: mcp-backend
    ports:
      - "8000:8000"
    environment:
      DATABASE_URL: postgresql+psycopg://mcp_user:mcp_password@postgres:5432/mcp_db
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      SLACK_BOT_TOKEN: ${SLACK_BOT_TOKEN:-}
      EMBEDDING_MODEL: text-embedding-ada-002
      EMBEDDING_DIMENSION: 1536
      FASTAPI_BASE_URL: http://mcp-backend:8000
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./app:/app/app
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - mcp-network

  mcp-server:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: mcp-server
    # Run MCP server in HTTP mode (networked) so it behaves as a normal
    # daemon inside Docker. This uses the FastAPI adapter inside
    # `app/mcp_server.py` (exposes /mcp/* endpoints) and lets us run
    # the process under uvicorn. We expose port 8080 for local access
    # and healthchecks.
    command: ["uvicorn", "app.mcp_server:HTTP_APP", "--host", "0.0.0.0", "--port", "8080"]
    environment:
      FASTAPI_BASE_URL: http://mcp-backend:8000
      MCP_TRANSPORT: http
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
    depends_on:
      mcp-backend:
        condition: service_healthy
    volumes:
      - ./app:/app/app
    restart: unless-stopped
    ports:
      - "8100:8080"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/mcp/health || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 5
    networks:
      - mcp-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - NODE_ENV=development
    container_name: mcp-frontend
    ports:
      - "3001:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - NODE_ENV=development
      - SKIP_PREFLIGHT_CHECK=true
      - WATCHPACK_POLLING=true
      - CHOKIDAR_USEPOLLING=true
    depends_on:
      mcp-backend:
        condition: service_healthy
    volumes:
      - ./frontend/src:/app/src:ro
      - ./frontend/public:/app/public:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s
    networks:
      - mcp-network
    mem_limit: 2g
    cpus: 1.5

  dozzle:
    image: amir20/dozzle:latest
    container_name: mcp-dozzle
    ports:
      - "9999:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    restart: unless-stopped
    networks:
      - mcp-network

  slackbot:
    build: ./slack
    ports:
      - "3000:3000"
    env_file:
      - .env
    environment:
       PORT: 3000
       DATABASE_URL: postgresql+psycopg://mcp_user:mcp_password@postgres:5432/mcp_db
       OPENAI_API_KEY: ${OPENAI_API_KEY:-}
       SLACK_BOT_TOKEN: ${SLACK_BOT_TOKEN:-}
       EMBEDDING_MODEL: text-embedding-ada-002
       EMBEDDING_DIMENSION: 1536
       FASTAPI_BASE_URL: http://mcp-backend:8000
       SLACK_CHANNEL: ${SLACK_CHANNEL:-warchan-ai-demo-1}
       SLACK_APP_TOKEN: ${SLACK_APP_TOKEN:-}
    volumes:
      - ./slack:/usr/src/app
    networks:
      - mcp-network
    depends_on:
      mcp-backend:
        condition: service_healthy

networks:
  mcp-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
